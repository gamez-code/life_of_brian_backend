# Generated by mgamez 2.0.13 on 2019-03-19 01:46

from django.db import migrations, models
import pandas as pd


def take_on_me(apps, schema_editor):
    worksingle = apps.get_model('worksingle', 'WorksSingle')
    source = apps.get_model('worksingle', 'Source')
    single = apps.get_model('worksingle', 'Single')
    source_single = apps.get_model('worksingle', 'SourceSingle')

    a_ha = pd.read_csv('works_metadata.csv')
    a_ha.dropna()

    for i in range(len(a_ha)):
        if len(single.objects.filter(iswc=a_ha.iloc[i].loc['iswc'])) is 0:
            if len(single.objects.filter(title=a_ha.iloc[i].loc['title'])) is 0:
                aux_single = single.objects.create(
                    title=a_ha.iloc[i].loc['title'],
                    iswc=a_ha.iloc[i].loc['iswc']
                )
                if len(source.objects.filter(name=a_ha.iloc[i].loc['source'])) is 0:
                    aux_source = source.objects.create(
                        name=a_ha.iloc[i].loc['source'],
                    )
                else:
                    aux_source = source.objects.get(name=a_ha.iloc[i].loc['source'])

                aux_source_single = source_single.objects.create(
                        md_id=a_ha.iloc[i].loc['id'],
                        single=aux_single,
                        source=aux_source
                    )
        else:
            if len(single.objects.filter(title=a_ha.iloc[i].loc['title']))==0:
                aux_single = single.objects.get(iswc=a_ha.iloc[i].loc['iswc'])
                aux_single.others_title = a_ha.iloc[i].loc['title']
                aux_single.save()
            else:
                aux_single = single.objects.get(title=a_ha.iloc[i].loc['title'])

            if len(source.objects.filter(name=a_ha.iloc[i].loc['source'])) is 0:
                aux_source = source.objects.create(
                    name=a_ha.iloc[i].loc['source'],
                )
            else:
                aux_source = source.objects.get(name=a_ha.iloc[i].loc['source'])

            if len(source_single.objects.filter(
                                                md_id=a_ha.iloc[i].loc['id'],
                                                single=aux_single,
                                                source=aux_source)) is 0:
                aux_source_single = source_single.objects.create(
                    md_id=a_ha.iloc[i].loc['id'],
                    single=aux_single,
                    source=aux_source
                )
            else:
                aux_source_single = source_single.objects.get(
                    md_id=a_ha.iloc[i].loc['id'],
                    single=aux_single,
                    source=aux_source)

        if len(worksingle.objects.filter(source=aux_source_single)) is 0:
            aux_worksingle = worksingle.objects.create(
                source=aux_source_single,
            )
            for j in a_ha.iloc[i].loc['contributors'].split('|'):
                aux_worksingle.contributors.create(name=j)
        else:
            aux_worksingle = worksingle.objects.get(source=aux_source_single)
            for j in a_ha.iloc[i].loc['contributors'].split('|'):
                if len(worksingle.objects.filter(contributors__name=j)) is 0:
                    aux_worksingle.others_contributors.create(name=j)

    return


class Migration(migrations.Migration):

    dependencies = [
        ('worksingle', '0001_initial'),
    ]

    operations = [
            migrations.RunPython(
                take_on_me
        ),
    ]
